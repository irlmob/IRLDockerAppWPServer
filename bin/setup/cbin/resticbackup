#!/bin/bash

set -eu
export SYNC_PATH=/var/www/
export BCK_PATH=/var/backup/
export PASS_FILE=/tmp/restic-password.txt

# Check if a snapshot ID was provided as an argument; if not, use 'latest'
TAG=${1:-cronjob}

echo "$(date) ðŸš€ Started Restic: $SYNC_PATH"
echo -n $RESTIC_PASSWORD > $PASS_FILE

# Check if the repository exists by listing snapshots, initialize if it does not exist
if ! restic -r $BCK_PATH --password-file $PASS_FILE snapshots >/dev/null 2>&1; then
    echo "Initializing Restic repository..."
    restic -r $BCK_PATH init --password-file $PASS_FILE
fi

#DUMP DB
docker exec ${DBNAME} bash -c "/var/www/database/resticdump"

# Proceed with the backup
restic -r $BCK_PATH --password-file $PASS_FILE --host $COMPOSE_PROJECT_NAME backup --tag $TAG $SYNC_PATH
restic -r $BCK_PATH --password-file $PASS_FILE --host $COMPOSE_PROJECT_NAME forget --tag cronjob --keep-last 10 --keep-hourly 12 --keep-daily 7 --keep-weekly 5 --keep-monthly 12 --keep-yearly 75 --prune
restic -r $BCK_PATH --password-file $PASS_FILE --host $COMPOSE_PROJECT_NAME forget --tag user --keep-last 5 --prune
restic -r $BCK_PATH --password-file $PASS_FILE --host $COMPOSE_PROJECT_NAME snapshots > /var/www/config/log/snapshots.txt
cat /var/www/config/log/snapshots.txt
#restic -r $BCK_PATH --password-file $PASS_FILE --host $COMPOSE_PROJECT_NAME --target / restore latest
# restic -r $BCK_PATH ls latest

# Remove the password file after the backup operation is complete
rm -rf /tmp/restic-password.txt
echo "$(date) âœ… Done with Restic: $SYNC_PATH"
